{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/image.js","webpack:///./src/components/seo.js"],"names":["Index","posts","data","allMarkdownRemark","edges","title","className","filter","post","node","frontmatter","length","map","key","id","to","path","date","excerpt","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"2FAAA,8IASe,SAASA,EAAT,GAAwB,IACtBC,EADqB,EAAPC,KACCC,kBAAtBC,MAER,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,aACX,yBAAKC,UAAU,cACXL,EACGM,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYL,MAAMM,OAAS,KACpDC,KAAI,YAAmB,IAAXJ,EAAU,EAAhBC,KACL,OACE,yBAAKH,UAAU,oBAAoBO,IAAKL,EAAKM,IAC3C,4BACE,kBAAC,OAAD,CAAMC,GAAIP,EAAKE,YAAYM,MAA3B,IAAmCR,EAAKE,YAAYL,MAApD,MAEF,gCAAMG,EAAKE,YAAYO,KAAvB,KACA,+BAAKT,EAAKU,QAAV,a,kCCzBlB,+B,kCCAA,iDAYA,SAASC,EAAT,GAAkD,IAAD,IAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMjB,EAAS,EAATA,MAC9BkB,EAASC,yBAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YACnDO,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBrB,MAExC,OACE,kBAAC,IAAD,CACEuB,eAAgB,CACdP,QAEFhB,MAAOA,EACPwB,cAAeF,EAAY,QAAWA,EAAiB,KACvDL,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAAS1B,GAEX,CACE2B,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAR,EAAKG,oBAAL,eAAmBO,SAAnB,IAEX,CACEH,KAAK,gBACLC,QAAS1B,GAEX,CACEyB,KAAK,sBACLC,QAASN,IAEXS,OAAOZ,KAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD","file":"component---src-pages-index-js-a26355a008bba553cf1f.js","sourcesContent":["import React from \"react\"\nimport { graphql, Link } from \"gatsby\"\nimport Helmet from \"react-helmet\"\n\nimport Layout from \"../components/layout\"\nimport Image from \"../components/image\"\nimport SEO from \"../components/seo\"\nimport '../styles/blog-listing.css'\n\nexport default function Index({data}) {\n  const { edges: posts } = data.allMarkdownRemark;\n\n  return (\n    <Layout>\n      <SEO title=\"UiraCode\" />\n      <div className=\"blog-posts\">\n        { posts\n            .filter(post => post.node.frontmatter.title.length > 0)\n            .map(({node: post}) => {\n              return (\n                <div className=\"blog-post-preview\" key={post.id}>\n                  <h1>\n                    <Link to={post.frontmatter.path}> {post.frontmatter.title} </Link>\n                  </h1>\n                  <h2> {post.frontmatter.date} </h2>\n                  <p> {post.excerpt} </p>\n                </div>\n              );\n            })\n        }\n      </div>\n    </Layout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark( \n      sort: {\n        order: DESC,\n        fields: [frontmatter___date]\n      }\n    ) {\n      edges {\n        node {\n          excerpt( pruneLength: 250 )\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nconst Image = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"profile-image.JPG\" }) {\n        childImageSharp {\n          fluid(maxWidth: 300) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  if (!data?.placeholderImage?.childImageSharp?.fluid) {\n    return <div>Picture not found</div>\n  }\n\n  return <Img fluid={data.placeholderImage.childImageSharp.fluid} className=\"rounded-circle\"/>\n}\n\nexport default Image\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.author || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}